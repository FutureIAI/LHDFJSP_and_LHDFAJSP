import random
import numpy as np

Total_Machine = [10, 20, 30, 40, 50]  # 全部机器
Initial_Job_num = 20  # 初始工件个数
Job_insert = [50, 100, 200]  # 工件新到达个数
DDT = [0.5, 1.0, 1.5]  # 工件紧急程度
E_ave = [50, 100, 200]  # 指数分布


def Instance_Generator(M_num, E_ave, New_insert, JobShop_num):
    '''
    :param     M_num: Machine Number
    :param     E_ave: exponential distribution
    :param     New_insert: New Job insert
    :param     JobShop_num: jobshop number
    :param     DDT:DDT
    :return    Processing time, 各工序在各个机器的处理时间
                A:New Job arrive time, 到达时间
                D:Deliver time, 截止日期
                M_num: Machine Number, 机器数
                Op_num: Operation Number, 工件的工序数
                J_num:Job NUMBER 工件数
    '''
    # 机器编号与所属车间,机器加工功率,空载功率的字典
    jobShop_id = [random.randint(0, JobShop_num - 1) for x in range(M_num)]
    working_power = [random.randint(10, 20) for o in range(M_num)]
    unload_power = [working_power[p] * random.uniform(0.1, 0.17) for p in range(M_num)]
    # 小数点处理
    jobShop_Tup = zip(jobShop_id, working_power, unload_power)
    jobShop_Dict = dict((machine, info) for machine, info in enumerate(jobShop_Tup))

    Initial_Job_num = 35
    Op_num = [random.randint(1, 5) for i in range(New_insert + Initial_Job_num)]  # 每个工件的工序数量
    Processing_time = []  # 处理时间
    for i in range(Initial_Job_num + New_insert):
        Job_i = []  # 工件
        for j in range(Op_num[i]):
            k = random.randint(5, M_num - 2)  # 记录一个随机数 1 - （机器数-2）
            T = list(range(M_num))  # 机器编号列表的转换
            random.shuffle(T)  # 对机器编号乱序操作
            T = T[0:k + 1]  # 取前 x 个的机器编号0-14
            O_i = list(np.ones(M_num) * (-1))  # 表示工序处理时间的一维数组，初始化-1
            for M_i in range(len(O_i)):
                if M_i in T:
                    O_i[M_i] = random.randint(1, 50) * (1 / (working_power[M_i] / 10.0))  # 生成处理时间
                    # 小数点处理
            Job_i.append(O_i)
        Processing_time.append(Job_i)
    A1 = [0 for i in range(Initial_Job_num)]  # 初始化起始工件到达时间
    A = np.random.exponential(E_ave, size=New_insert)  # 指数分布(期望，样本数量)
    A = [int(A[i]) for i in range(len(A))]  # 插单工件到达时间
    A1.extend(A)
    T_ijave = []  # 工件平均处理时间
    for i in range(Initial_Job_num + New_insert):
        Tad = []
        for j in range(Op_num[i]):
            T_ijk = [k for k in Processing_time[i][j] if k != -1]  # O_ij可用机器处理时间列表
            Tad.append(sum(T_ijk) / len(T_ijk))  # O_ij平均处理时间
        T_ijave.append(sum(Tad))
    D1 = [int(T_ijave[i] * random.uniform(0.5, 1.5)) for i in range(Initial_Job_num)]  # 起始工件截止日期
    D = [int(A1[i] + T_ijave[i] * random.uniform(0.5, 1.5)) for i in range(Initial_Job_num, Initial_Job_num + New_insert)]
    # 到达时间 + 工件平均处理时间 * DDT
    D1.extend(D)
    O_num = sum(Op_num)  # 总工序数
    # 交货期紧迫度（DDT）：rand(0.5, 1.5).
    # 工件权重Wi：rand(1,5)
    DDT = [random.uniform(0.5, 1.5) for i in range(Initial_Job_num + New_insert)]
    # 小数点处理
    Wi = [random.uniform(1, 5) for i in range(Initial_Job_num + New_insert)]
    # 小数点处理
    J_tup = zip(Op_num, Wi, DDT)
    J = dict((J_i, job_info) for J_i, job_info in enumerate(J_tup))  # 工件与工序数量、权重、交货期紧迫度字典

    J_num = Initial_Job_num + New_insert

    # 车间运输时间
    transportJS = np.random.randint(8, 11, (JobShop_num, JobShop_num))
    for j in range(JobShop_num):
        transportJS[j][j] = 0

    # 机器运输时间
    transportMAC = np.random.randint(1, 4, (M_num, M_num))
    for row in range(M_num):
        transportMAC[row][row] = 0
        for col in range(M_num):
            if jobShop_Dict[row][0] != jobShop_Dict[col][0]:
                transportMAC[row][col] = -1
    return Processing_time, A1, D1, M_num, Op_num, J, O_num, J_num, jobShop_Dict, transportJS, transportMAC


# Processing_time, A, D, M_num, Op_num, J, O_num, J_num, jobShop_Dict, transportJS, transportMAC = Instance_Generator(20, 50, 25, 5)
# print(Processing_time, A, D, M_num, Op_num, J, O_num, J_num, jobShop_Dict, transportJS, transportMAC)

# Scenario 4 (15 Initial + 10 Insert)
Processing_time = [[[18.42, -1.0, 36.0, 26.0, -1.0, 0.58, 23.75, 0.5, 9.33, 33.84], [2.10, 8.0, 48.0, -1.0, 1.76, -1.0, 15.0, -1.0, 28.0, 16.15]],
                   [[3.15, 20.0, 49.0, 2.66, 14.11, 8.82, 25.0, -1.0, -1.0, -1.0]],
                   [[3.15, -1.0, -1.0, 28.66, 6.47, -1.0, 6.25, 18.0, -1.0, 7.69], [-1.0, 2.5, -1.0, 4.0, 26.47, 7.64, 22.5, 10.0, -1.0, 18.46]],
                   [[21.05, 0.5, 38.0, -1.0, 19.41, 11.17, 21.87, 6.0, 11.33, 21.53], [4.21, 22.0, 21.0, 32.0, 2.58, 5.29, 24.37, 24.5, -1.0, 1.53]],
                   [[14.73, 23.0, 19.0, 6.66, -1.0, 12.94, 30.0, 3.0, 8.66, 26.15], [16.31, 22.5, 46.0, -1.0, 16.47, 24.70, 31.25, 19.0, 3.33, -1.0], [2.10, 19.0, 42.0, 8.66, 10.0, -1.0, -1.0, 3.0, 19.33, 24.61]],
                   [[10.0, 9.0, 19.0, 16.66, 22.35, 7.64, -1.0, 18.5, 28.66, -1.0], [10.0, 22.0, 34.0, 12.66, 15.29, -1.0, 8.12, 24.53, -1.0, 33.07], [11.05, -1.0, 19.0, -1.0, 22.35, 22.35, 30.0, 22.5, -1.0, 37.69]],
                   [[17.89, 18.5, 46.0, -1.0, 29.41, 5.88, -1.0, 7.5, -1.0, 34.61]],
                   [[17.36, 17.52, -1.0, -1.0, 5.29, 2.94, 6.25, -1.0, -1.0, 11.53], [3.68, 23.0, 22.0, 23.33, -1.0, 9.41, 28.75, 3.0, 26.66, 24.61], [4.21, 9.5, -1.0, -1.0, 1.76, 11.76, 12.5, 23.0, 26.0, 18.46], [22.10, -1.0, 31.0, 22.66, 24.11, 21.76, -1.0, 5.0, 3.33, 3.84], [5.26, 3.0, 35.0, -1.0, 22.35, 5.88, -1.0, -1.0, -1.0, 33.84]],
                   [[6.84, 23.5, 9.0, -1.0, 25.29, 12.35, -1.0, 17.0, -1.0, 20.76], [21.57, 13.0, 25.0, -1.0, 24.70, -1.0, -1.0, 19.0, 8.66, 20.0]],
                   [[10.52, 0.5, -1.0, 22.0, 29.41, -1.0, 1.25, 10.0, -1.0, -1.0], [-1.0, -1.0, 41.0, -1.0, 7.64, 19.41, 28.12, 19.0, -1.0, 18.46], [16.84, 17.5, 37.0, 28.0, 5.29, -1.0, 10.0, 10.0, 1.33, 20.0], [-1.0, 18.5, 26.0, 30.66, 0.58, -1.0, 13.75, 4.5, 33.33, 5.38], [1.57, 6.0, 25.0, -1.0, -1.0, 27.64, 7.5, 25.0, 4.66, 20.76]],
                   [[8.94, 14.5, 29.0, -1.0, 21.17, -1.0, -1.0, 13.0, 24.66, 11.53], [5.78, -1.0, 17.0, -1.0, -1.0, 12.35, 9.37, 1.0, 32.0, 24.61], [12.10, 19.5, 44.0, 21.33, 11.76, -1.0, -1.0, -1.0, -1.0, 3.76], [7.89, -1.0, 36.0, 5.33, 12.94, 26.47, 5.0, -1.0, 26.0, -1.0], [-1.0, 16.0, -1.0, 14.66, 5.88, 1.76, -1.0, 13.0, 2.66, -1.0]],
                   [[18.94, 12.5, 44.0, 12.0, 26.47, 16.47, 5.0, 1.0, 20.0, -1.0], [16.31, 8.0, 7.0, 32.0, 1.17, 20.0, -1.0, 1.5, 24.0, -1.0], [-1.0, 18.5, 49.0, 33.33, -1.0, 15.29, 30.625, -1.0, 32.0, -1.0]],
                   [[7.89, 3.5, 26.0, -1.0, 14.11, 29.41, 10.62, 10.0, 5.33, -1.0], [20.52, 7.5, 28.0, -1.0, 4.11, 20.58, 15.0, 17.5, 11.33, 22.30], [3.68, -1.0, 5.0, -1.0, 5.88, 4.11, 12.5, 19.0, -1.0, 19.23], [11.05, -1.0, 10.0, 6.66, 25.88, 3.52, 1.875, 17.0, 23.33, 10.76]],
                   [[2.10, 8.5, -1.0, 32.66, 11.76, -1.0, 23.75, 13.0, 30.66, 23.07], [12.63, 6.0, 7.0, 33.33, 14.11, -1.0, -1.0, 21.0, 15.33, 13.07], [7.36, 6.5, -1.0, 22.0, -1.0, 14.70, 29.375, 0.5, 24.0, 35.38], [24.21, 5.5, 23.0, 33.33, 8.82, -1.0, 2.5, 9.0, 20.66, 38.46], [24.73, 6.5, -1.0, -1.0, 11.17, 7.64, 28.12, -1.0, 2.0, 13.07]],
                   [[-1.0, 3.0, 35.0, 12.66, 14.70, 12.35, 2.5, 17.0, 9.33, 1.53], [-1.0, 9.0, -1.0, -1.0, 17.64, 8.23, 7.5, 9.0, 15.33, -1.0], [8.94, -1.0, 16.0, -1.0, 23.52, -1.0, 15.62, 4.5, -1.0, 23.07], [7.89, -1.0, 28.0, -1.0, 14.11, 18.82, 7.5, 11.0, 23.33, 35.38]],
                   [[21.57, 4.5, 11.0, 26.0, 15.29, 16.47, 21.25, 18.5, 14.66, -1.0]],
                   [[21.05, 16.5, -1.0, 9.33, 14.70, 17.05, 21.875, 11.0, 3.33, 29.99], [16.31, 19.5, 24.0, -1.0, 21.76, 7.64, 30.0, 22.0, 22.0, 28.46]],
                   [[8.42, 24.0, 11.0, 15.33, 12.35, 6.47, -1.0, 5.0, 2.66, 13.84], [-1.0, -1.0, 12.0, 14.66, -1.0, -1.0, 6.25, 5.0, 17.33, 7.69], [8.42, -1.0, 42.0, 14.66, -1.0, 27.64, 16.87, -1.0, 23.33, 37.69]],
                   [[1.05, 10.5, 24.0, -1.0, 28.23, -1.0, 1.875, -1.0, 12.0, -1.0], [-1.0, 24.0, 27.0, 25.33, 2.35, 18.82, 13.75, 15.0, 32.66, 16.92], [19.47, 2.5, 9.0, -1.0, -1.0, 2.58, 26.875, -1.0, 19.33, 15.38], [24.21, -1.0, 36.0, -1.0, 27.64, 23.52, 25.0, -1.0, 8.66, 14.61], [22.10, 16.0, -1.0, 6.0, -1.0, 10.58, 24.37, 2.0, 20.0, 31.53]],
                   [[-1.0, -1.0, -1.0, 5.33, 15.88, 24.11, 23.125, 12.0, 12.0, 17.69], [3.68, -1.0, 14.0, -1.0, 12.35, 15.88, -1.0, 23.5, 32.66, 25.38]],
                   [[23.68, 17.5, 28.0, 30.0, -1.0, 22.35, 29.375, 12.0, 7.33, -1.0], [20.52, -1.0, -1.0, -1.0, 20.58, 2.35, -1.0, 0.5, 1.33, 26.92]],
                   [[5.26, 2.0, 19.0, -1.0, 23.52, 27.05, -1.0, 22.5, 22.66, 24.61], [9.47, 13.0, -1.0, -1.0, 1.17, 9.41, 1.25, -1.0, 28.0, 6.15], [11.05, -1.0, -1.0, 23.33, 24.11, -1.0, 3.75, 18.5, 16.66, -1.0]],
                   [[16.31, 2.0, 35.0, 16.0, -1.0, 4.70, 30.625, 7.0, 24.66, 10.76], [11.57, -1.0, 12.0, 33.33, 10.58, 2.35, 24.37, 2.0, 13.33, 28.46]],
                   [[3.68, 10.0, 48.0, -1.0, 22.35, 4.11, 15.62, 17.0, 31.33, 26.15], [19.47, -1.0, 21.0, 12.0, 12.35, 18.82, 10.625, 9.0, 27.33, 21.53], [-1.0, 4.5, 33.0, -1.0, 22.94, 19.41, 12.5, 12.0, 23.33, 18.46]],
                   [[13.15, -1.0, -1.0, -1.0, 16.47, 10.0, 25.0, 20.5, -1.0, 34.61], [-1.0, -1.0, 46.0, 19.33, 17.64, 23.52, -1.0, -1.0, 26.66, 16.15], [22.10, -1.0, -1.0, 26.66, 2.94, 28.82, 13.75, 7.5, -1.0, -1.0]]]
A = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 189, 281, 151, 14, 66, 31, 43, 51, 54]
D = [18, 21, 27, 29, 80, 62, 17, 56, 18, 90, 87, 37, 49, 68, 74, 27, 232, 334, 263, 62, 94, 83, 69, 130, 108]
M_num = 10
Op_num = [2, 1, 2, 2, 3, 3, 1, 5, 2, 5, 5, 3, 4, 5, 4, 1, 2, 3, 5, 2, 2, 3, 2, 3, 3]
J = {0: (2, 3.8163554465578584, 1.3558424477270417), 1: (1, 1.9424106684592526, 1.0659665142319419),
     2: (2, 4.655471436349685, 0.6305027638111268), 3: (2, 1.593962968660695, 0.9876940603268678),
     4: (3, 4.684296383067718, 1.0570024328350565), 5: (3, 1.6833775303868657, 1.1050383968675082),
     6: (1, 2.552977196744528, 0.8027226094122815), 7: (5, 1.6053174295126218, 0.8691150931041319),
     8: (2, 4.73636169897576, 1.4761398463716398), 9: (5, 1.0915550800008051, 1.4724327303484581),
     10: (5, 2.742213879110411, 1.4665799497086205), 11: (3, 3.1407045593590137, 0.6896980634391634),
     12: (4, 4.811838761117825, 1.4359809784440305), 13: (5, 1.407763228385703, 0.7205677817231725),
     14: (4, 2.905904635669186, 1.0359402223238274), 15: (1, 3.8595402386891275, 0.9478759639145714),
     16: (2, 1.3419373271187633, 1.2064564724421467), 17: (3, 3.308324498087377, 1.4992977527399862),
     18: (5, 4.619314708604497, 1.236536008185933), 19: (2, 4.770695441811188, 1.0793098668127699),
     20: (2, 1.5564523643871668, 0.562707049440077), 21: (3, 2.91037963578165, 1.3939762306058108),
     22: (2, 3.4606524348834196, 0.5381674739768213), 23: (3, 1.754317683921451, 0.9207890012466265),
     24: (3, 3.9411061030735106, 0.7909412418103275)}
O_num = 73
J_num = 25
jobShop_Dict = {0: (0, 19, 2.1448758038579796), 1: (3, 20, 2.850807874083446), 2: (2, 10, 1.6611963835797798),
                3: (3, 15, 1.756658457297484), 4: (1, 17, 2.0821079479592806), 5: (1, 17, 1.8831524420405135),
                6: (0, 16, 2.025428028508909), 7: (2, 20, 2.2460989670338587), 8: (2, 15, 1.835577563050396),
                9: (3, 13, 1.72264927666802)}
transportJS = [[0, 10, 10, 10],
               [9, 0, 10, 8],
               [8, 9, 0, 10],
               [9, 10, 8, 0]]
transportMAC = [[0, -1, -1, -1, -1, -1, 2, -1, -1, -1],
                [-1, 0, -1, 3, -1, -1, -1, -1, -1, 2],
                [-1, -1, 0, -1, -1, -1, -1, 2, 3, -1],
                [-1, 3, -1, 0, -1, -1, -1, -1, -1, 2],
                [-1, -1, -1, -1, 0,  1, -1, -1, -1, -1],
                [-1, -1, -1, -1, 3, 0, -1, -1, -1, -1],
                [3, -1, -1, -1, -1, -1, 0, -1, -1, -1],
                [-1, -1, 1, -1, -1, -1, -1, 0, 1, -1],
                [-1, -1, 2, -1, -1, -1, -1, 3, 0, -1],
                [-1, 1, -1, 1, -1, -1, -1, -1, -1, 0]]